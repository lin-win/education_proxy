package com.xiao.diploma_system.utils;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int8;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class Diploma extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETAPPLYINFOBYADDR = "getApplyInfoByAddr";

    public static final String FUNC_SETSTATE = "setstate";

    public static final String FUNC_TESTAPPLY2 = "testApply2";

    public static final String FUNC_STUDENTLOGIN = "studentLogin";

    public static final String FUNC_ADDBLACKLIST = "addBlackList";

    public static final String FUNC_TESTREGISTSTUDENT = "testRegistStudent";

    public static final String FUNC_GETIDBYINDEX = "getIDByIndex";

    public static final String FUNC_QUERYDIPLOMA = "queryDiploma";

    public static final String FUNC_APPLYDIPLOMA = "applyDiploma";

    public static final String FUNC_COMFIRMEDU = "comfirmEdu";

    public static final String FUNC_REVOKESTU = "revokeStu";

    public static final String FUNC_TESTADDBLT = "testaddBlt";

    public static final String FUNC_UPDATESTUDENTINFO = "updateStudentInfo";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETSTUACCOUNT = "getStuAccount";

    public static final String FUNC_GETBLTACCOUNT = "getBltAccount";

    public static final String FUNC_SETIMAGE = "setimage";

    public static final String FUNC_ADMINLOGIN = "adminLogin";

    public static final String FUNC_GETBLACKLISTINFOBYINDEX = "getBlackListInfoByIndex";

    public static final String FUNC_REGISTSTUDENT = "registStudent";

    public static final String FUNC_TESTAPPLY3 = "testApply3";

    public static final String FUNC_TESTAPPLY1 = "testApply1";

    public static final String FUNC_REVOKEEDU = "revokeEdu";

    public static final String FUNC_GETSTUDENTINFOBYADDR = "getStudentInfoByAddr";

    public static final String FUNC_IFEXSIT = "ifExsit";

    public static final String FUNC_REVOKEBLACKLIST = "revokeBlackList";

    public static final String FUNC_EXSITEDU = "exsitEdu";

    public static final String FUNC_SETEDUHASH = "setEduHash";

    public static final String FUNC_GETAPPLYACCOUNT = "getApplyAccount";

    public static final String FUNC_GETREVOKEINFOBYADDR = "getRevokeInfoByAddr";

    public static final String FUNC_GETADDRESSBYID = "getAddressByID";

    public static final Event EVENTRESPONSELOG_EVENT = new Event("eventResponseLog",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Diploma(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Diploma(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Diploma(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Diploma(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> getApplyInfoByAddr(String addr) {
        final Function function = new Function(FUNC_GETAPPLYINFOBYADDR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setstate(String addr, BigInteger _state, BigInteger _index) {
        final Function function = new Function(
                FUNC_SETSTATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.generated.Int8(_state),
                        new org.web3j.abi.datatypes.generated.Int8(_index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> testApply2(String addr) {
        final Function function = new Function(
                FUNC_TESTAPPLY2,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> studentLogin(String addr, BigInteger _id, String _password) {
        final Function function = new Function(FUNC_STUDENTLOGIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.generated.Uint256(_id),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addBlackList(String addr, String _sid, String _name, String _school, String _reason) {
        final Function function = new Function(
                FUNC_ADDBLACKLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_sid),
                        new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_school),
                        new org.web3j.abi.datatypes.Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> testRegistStudent() {
        final Function function = new Function(
                FUNC_TESTREGISTSTUDENT,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getIDByIndex(BigInteger _index) {
        final Function function = new Function(FUNC_GETIDBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> queryDiploma(String addr) {
        final Function function = new Function(FUNC_QUERYDIPLOMA,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> applyDiploma(String addr, String _school, String _major, String _time, String _eduType) {
        final Function function = new Function(
                FUNC_APPLYDIPLOMA,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_school),
                        new org.web3j.abi.datatypes.Utf8String(_major),
                        new org.web3j.abi.datatypes.Utf8String(_time),
                        new org.web3j.abi.datatypes.Utf8String(_eduType)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> comfirmEdu(String addr) {
        final Function function = new Function(
                FUNC_COMFIRMEDU,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeStu(String addr, BigInteger _id, String _password) {
        final Function function = new Function(
                FUNC_REVOKESTU,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.generated.Uint256(_id),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> testaddBlt() {
        final Function function = new Function(
                FUNC_TESTADDBLT,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateStudentInfo(String addr, String _sid, String _name, String _password, String _school, String _major, String _time, String _eduType, String _image) {
        final Function function = new Function(
                FUNC_UPDATESTUDENTINFO,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_sid),
                        new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_password),
                        new org.web3j.abi.datatypes.Utf8String(_school),
                        new org.web3j.abi.datatypes.Utf8String(_major),
                        new org.web3j.abi.datatypes.Utf8String(_time),
                        new org.web3j.abi.datatypes.Utf8String(_eduType),
                        new org.web3j.abi.datatypes.Utf8String(_image)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getStuAccount() {
        final Function function = new Function(FUNC_GETSTUACCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getBltAccount() {
        final Function function = new Function(FUNC_GETBLTACCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setimage(String addr, String _image) {
        final Function function = new Function(
                FUNC_SETIMAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_image)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> adminLogin(String addr, String _id, String _password) {
        final Function function = new Function(FUNC_ADMINLOGIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_id),
                        new org.web3j.abi.datatypes.Utf8String(_password)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> getBlackListInfoByIndex(BigInteger index) {
        final Function function = new Function(FUNC_GETBLACKLISTINFOBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> registStudent(String addr, String _sid, String _name, String _password, String _school, String _major, String _eduHash, String _time, String _eduType, String _image) {
        final Function function = new Function(
                FUNC_REGISTSTUDENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_sid),
                        new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_password),
                        new org.web3j.abi.datatypes.Utf8String(_school),
                        new org.web3j.abi.datatypes.Utf8String(_major),
                        new org.web3j.abi.datatypes.Utf8String(_eduHash),
                        new org.web3j.abi.datatypes.Utf8String(_time),
                        new org.web3j.abi.datatypes.Utf8String(_eduType),
                        new org.web3j.abi.datatypes.Utf8String(_image)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> testApply3(String addr) {
        final Function function = new Function(
                FUNC_TESTAPPLY3,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> testApply1(String addr) {
        final Function function = new Function(
                FUNC_TESTAPPLY1,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeEdu(String addr, String _id, String _name, String _reason) {
        final Function function = new Function(
                FUNC_REVOKEEDU,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_id),
                        new org.web3j.abi.datatypes.Utf8String(_name),
                        new org.web3j.abi.datatypes.Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, String, String, BigInteger, BigInteger, String>> getStudentInfoByAddr(String addr) {
        final Function function = new Function(FUNC_GETSTUDENTINFOBYADDR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int8>() {}, new TypeReference<Int8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, String, String, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple7<BigInteger, String, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, String, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> ifExsit(String add) {
        final Function function = new Function(FUNC_IFEXSIT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, add)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeBlackList(BigInteger index) {
        final Function function = new Function(
                FUNC_REVOKEBLACKLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> exsitEdu(String addr) {
        final Function function = new Function(FUNC_EXSITEDU,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setEduHash(String addr, String _eduHash, String _time) {
        final Function function = new Function(
                FUNC_SETEDUHASH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr),
                        new org.web3j.abi.datatypes.Utf8String(_eduHash),
                        new org.web3j.abi.datatypes.Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getApplyAccount() {
        final Function function = new Function(FUNC_GETAPPLYACCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<String, String, String>> getRevokeInfoByAddr(String addr) {
        final Function function = new Function(FUNC_GETREVOKEINFOBYADDR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, String>>(function,
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> getAddressByID(BigInteger _id) {
        final Function function = new Function(FUNC_GETADDRESSBYID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<EventResponseLogEventResponse> getEventResponseLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTRESPONSELOG_EVENT, transactionReceipt);
        ArrayList<EventResponseLogEventResponse> responses = new ArrayList<EventResponseLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventResponseLogEventResponse typedResponse = new EventResponseLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventResponseLogEventResponse> eventResponseLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, EventResponseLogEventResponse>() {
            @Override
            public EventResponseLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTRESPONSELOG_EVENT, log);
                EventResponseLogEventResponse typedResponse = new EventResponseLogEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventResponseLogEventResponse> eventResponseLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTRESPONSELOG_EVENT));
        return eventResponseLogEventFlowable(filter);
    }

    @Deprecated
    public static Diploma load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Diploma(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Diploma load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Diploma(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Diploma load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Diploma(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Diploma load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Diploma(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Diploma> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Diploma.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Diploma> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Diploma.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Diploma> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Diploma.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Diploma> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Diploma.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class EventResponseLogEventResponse extends BaseEventResponse {
        public String addr;

        public String message;
    }
}
